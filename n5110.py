#!/usr/bin/python
# -*- coding: UTF-8 -*-
import Adafruit_BBIO.GPIO as GPIO
import time

PIN_SCE="P9_11"  # LCD CS # Pin 3
PIN_RESET="P9_12"  # LCD RST # Pin 4
PIN_DC="P9_13"  # LCD Dat/Com # Pin 5
PIN_SDIN="P9_14"  # LCD SPIDat # Pin 6
PIN_SCLK="P9_15"  # LCD SPIClk# Pin 7
# LCD Gnd .... Pin 2
# LCD Vcc .... Pin 1
PIN_LEDs="P9_16" # LCD Vlcd ... Pin 8
LCD_C=GPIO.LOW
LCD_D=GPIO.HIGH

LCD_X=84
LCD_Y=48
LCD_YB=6
LCD_CMD=0

FREQ=0#.000001
ASCII=(
(0x00, 0x00, 0x00, 0x00, 0x00  ) # 20
  ,(
    0x00, 0x00, 0x5f, 0x00, 0x00  ) # 21 !
  ,(
    0x00, 0x07, 0x00, 0x07, 0x00  ) # 22 "
  ,(
    0x14, 0x7f, 0x14, 0x7f, 0x14  ) # 23 #
  ,(
    0x24, 0x2a, 0x7f, 0x2a, 0x12  ) # 24 $
  ,(
    0x23, 0x13, 0x08, 0x64, 0x62  ) # 25 %
  ,(
    0x36, 0x49, 0x55, 0x22, 0x50  ) # 26 &
  ,(
    0x00, 0x05, 0x03, 0x00, 0x00  ) # 27 '
  ,(
    0x00, 0x1c, 0x22, 0x41, 0x00  ) # 28 (
  ,(
    0x00, 0x41, 0x22, 0x1c, 0x00  ) # 29 )
  ,(
    0x14, 0x08, 0x3e, 0x08, 0x14  ) # 2a *
  ,(
    0x08, 0x08, 0x3e, 0x08, 0x08  ) # 2b +
  ,(
    0x00, 0x50, 0x30, 0x00, 0x00  ) # 2c ,
  ,(
    0x08, 0x08, 0x08, 0x08, 0x08  ) # 2d -
  ,(
    0x00, 0x60, 0x60, 0x00, 0x00  ) # 2e .
  ,(
    0x20, 0x10, 0x08, 0x04, 0x02  ) # 2f /
  ,(
    0x3e, 0x51, 0x49, 0x45, 0x3e  ) # 30 0
  ,(
    0x00, 0x42, 0x7f, 0x40, 0x00  ) # 31 1
  ,(
    0x42, 0x61, 0x51, 0x49, 0x46  ) # 32 2
  ,(
    0x21, 0x41, 0x45, 0x4b, 0x31  ) # 33 3
  ,(
    0x18, 0x14, 0x12, 0x7f, 0x10  ) # 34 4
  ,(
    0x27, 0x45, 0x45, 0x45, 0x39  ) # 35 5
  ,(
    0x3c, 0x4a, 0x49, 0x49, 0x30  ) # 36 6
  ,(
    0x01, 0x71, 0x09, 0x05, 0x03  ) # 37 7
  ,(
    0x36, 0x49, 0x49, 0x49, 0x36  ) # 38 8
  ,(
    0x06, 0x49, 0x49, 0x29, 0x1e  ) # 39 9
  ,(
    0x00, 0x36, 0x36, 0x00, 0x00  ) # 3a :
  ,(
    0x00, 0x56, 0x36, 0x00, 0x00  ) # 3b ;
  ,(
    0x08, 0x14, 0x22, 0x41, 0x00  ) # 3c <
  ,(
    0x14, 0x14, 0x14, 0x14, 0x14  ) # 3d =
  ,(
    0x00, 0x41, 0x22, 0x14, 0x08  ) # 3e >
  ,(
    0x02, 0x01, 0x51, 0x09, 0x06  ) # 3f ?
  ,(
    0x32, 0x49, 0x79, 0x41, 0x3e  ) # 40 @
  ,(
    0x7e, 0x11, 0x11, 0x11, 0x7e  ) # 41 A
  ,(
    0x7f, 0x49, 0x49, 0x49, 0x36  ) # 42 B
  ,(
    0x3e, 0x41, 0x41, 0x41, 0x22  ) # 43 C
  ,(
    0x7f, 0x41, 0x41, 0x22, 0x1c  ) # 44 D
  ,(
    0x7f, 0x49, 0x49, 0x49, 0x41  ) # 45 E
  ,(
    0x7f, 0x09, 0x09, 0x09, 0x01  ) # 46 F
  ,(
    0x3e, 0x41, 0x49, 0x49, 0x7a  ) # 47 G
  ,(
    0x7f, 0x08, 0x08, 0x08, 0x7f  ) # 48 H
  ,(
    0x00, 0x41, 0x7f, 0x41, 0x00  ) # 49 I
  ,(
    0x20, 0x40, 0x41, 0x3f, 0x01  ) # 4a J
  ,(
    0x7f, 0x08, 0x14, 0x22, 0x41  ) # 4b K
  ,(
    0x7f, 0x40, 0x40, 0x40, 0x40  ) # 4c L
  ,(
    0x7f, 0x02, 0x0c, 0x02, 0x7f  ) # 4d M
  ,(
    0x7f, 0x04, 0x08, 0x10, 0x7f  ) # 4e N
  ,(
    0x3e, 0x41, 0x41, 0x41, 0x3e  ) # 4f O
  ,(
    0x7f, 0x09, 0x09, 0x09, 0x06  ) # 50 P
  ,(
    0x3e, 0x41, 0x51, 0x21, 0x5e  ) # 51 Q
  ,(
    0x7f, 0x09, 0x19, 0x29, 0x46  ) # 52 R
  ,(
    0x46, 0x49, 0x49, 0x49, 0x31  ) # 53 S
  ,(
    0x01, 0x01, 0x7f, 0x01, 0x01  ) # 54 T
  ,(
    0x3f, 0x40, 0x40, 0x40, 0x3f  ) # 55 U
  ,(
    0x1f, 0x20, 0x40, 0x20, 0x1f  ) # 56 V
  ,(
    0x3f, 0x40, 0x38, 0x40, 0x3f  ) # 57 W
  ,(
    0x63, 0x14, 0x08, 0x14, 0x63  ) # 58 X
  ,(
    0x07, 0x08, 0x70, 0x08, 0x07  ) # 59 Y
  ,(
    0x61, 0x51, 0x49, 0x45, 0x43  ) # 5a Z
  ,(
    0x00, 0x7f, 0x41, 0x41, 0x00  ) # 5b [
  ,(
    0x02, 0x04, 0x08, 0x10, 0x20  ) # 5c ¥
  ,(
    0x00, 0x41, 0x41, 0x7f, 0x00  ) # 5d ]
  ,(
    0x04, 0x02, 0x01, 0x02, 0x04  ) # 5e ^
  ,(
    0x40, 0x40, 0x40, 0x40, 0x40  ) # 5f _
  ,(
    0x00, 0x01, 0x02, 0x04, 0x00  ) # 60 `
  ,(
    0x20, 0x54, 0x54, 0x54, 0x78  ) # 61 a
  ,(
    0x7f, 0x48, 0x44, 0x44, 0x38  ) # 62 b
  ,(
    0x38, 0x44, 0x44, 0x44, 0x20  ) # 63 c
  ,(
    0x38, 0x44, 0x44, 0x48, 0x7f  ) # 64 d
  ,(
    0x38, 0x54, 0x54, 0x54, 0x18  ) # 65 e
  ,(
    0x08, 0x7e, 0x09, 0x01, 0x02  ) # 66 f
  ,(
    0x0c, 0x52, 0x52, 0x52, 0x3e  ) # 67 g
  ,(
    0x7f, 0x08, 0x04, 0x04, 0x78  ) # 68 h
  ,(
    0x00, 0x44, 0x7d, 0x40, 0x00  ) # 69 i
  ,(
    0x20, 0x40, 0x44, 0x3d, 0x00  ) # 6a j
  ,(
    0x7f, 0x10, 0x28, 0x44, 0x00  ) # 6b k
  ,(
    0x00, 0x41, 0x7f, 0x40, 0x00  ) # 6c l
  ,(
    0x7c, 0x04, 0x18, 0x04, 0x78  ) # 6d m
  ,(
    0x7c, 0x08, 0x04, 0x04, 0x78  ) # 6e n
  ,(
    0x38, 0x44, 0x44, 0x44, 0x38  ) # 6f o
  ,(
    0x7c, 0x14, 0x14, 0x14, 0x08  ) # 70 p
  ,(
    0x08, 0x14, 0x14, 0x18, 0x7c  ) # 71 q
  ,(
    0x7c, 0x08, 0x04, 0x04, 0x08  ) # 72 r
  ,(
    0x48, 0x54, 0x54, 0x54, 0x20  ) # 73 s
  ,(
    0x04, 0x3f, 0x44, 0x40, 0x20  ) # 74 t
  ,(
    0x3c, 0x40, 0x40, 0x20, 0x7c  ) # 75 u
  ,(
    0x1c, 0x20, 0x40, 0x20, 0x1c  ) # 76 v
  ,(
    0x3c, 0x40, 0x30, 0x40, 0x3c  ) # 77 w
  ,(
    0x44, 0x28, 0x10, 0x28, 0x44  ) # 78 x
  ,(
    0x0c, 0x50, 0x50, 0x50, 0x3c  ) # 79 y
  ,(
    0x44, 0x64, 0x54, 0x4c, 0x44  ) # 7a z
  ,(
    0x00, 0x08, 0x36, 0x41, 0x00  ) # 7b (
  ,(
    0x00, 0x00, 0x7f, 0x00, 0x00  ) # 7c |
  ,(
    0x00, 0x41, 0x36, 0x08, 0x00  ) # 7d )
  ,(
    0x10, 0x08, 0x08, 0x10, 0x08  ) # 7e ←
  ,(
    0x00, 0x06, 0x09, 0x09, 0x06  ) # 7f →
)

"""
bitOrder: "MSB","LSB"
"""
def shiftOut(dataPin, clockPin, bitOrder, val):
	for i in range(8):
		oval=GPIO.LOW
		if bitOrder == "LSB":
			oval=(val & (1<<i))>>i
        	else:
			oval=(val & (1 << (7 - i)))>>(7 - i)
		GPIO.output(dataPin,oval)
		GPIO.output(clockPin, GPIO.HIGH)
		time.sleep(FREQ)
		GPIO.output(clockPin, GPIO.LOW)           
		time.sleep(FREQ)
class Pos:
	def __init__(self,x=0,y=0):
		self.x=x
		self.y=y
	def __init__(self,pos):
		self.x=pos.x
		self.y=pos.y

	def equals(self,pos):
		return self.x==pos.x and self.y==pos.y

	def set(self,x,y):
		self.x=x
		self.y=y
class Screen:
	def __init__(self):
		self.frame=[[0 for i in range(6)] for j in range(84)]
	def lcdBacklight(self,on):
		if on:
			GPIO.output(PIN_LEDs,GPIO.HIGH)
		else:
			GPIO.output(PIN_LEDs,GPIO.LOW)
	def lcdClear(self):
		for i in range(0,LCD_X * LCD_Y / 8):
			self.lcdWrite(LCD_D, 0x00)

	def lcdWrite(self,dc, data):
		GPIO.output(PIN_DC, dc)
		GPIO.output(PIN_SCE, GPIO.LOW)
		shiftOut(PIN_SDIN, PIN_SCLK, "MSB", data);
		GPIO.output(PIN_SCE, GPIO.HIGH)

	def orVal(self,x,y,val):
		#print "Ov: x="+str(x)+" y="+str(y)+" val="+str(val)
		x=x%LCD_X
		y=y%LCD_YB
		self.frame[x][y]=self.frame[x][y]|val

	def lcdString(self,characters):
		for c in characters:
			self.lcdCharacter(c)
 	
	def lcdCharacter(self,character):
		if ord(character)-0x20 < 0x7f:
			self.lcdWrite(LCD_D, 0x00)
			for i in range(5):
				self.lcdWrite(LCD_D, ASCII[ord(character) - 0x20][i])
			self.lcdWrite(LCD_D, 0x00)

	def lcdDisplayControl(self,dc):
		self.lcdWrite(LCD_CMD,0x8|dc)

	def lcdInitialise(self):
		GPIO.setup(PIN_SCE, GPIO.OUT)
		GPIO.setup(PIN_RESET, GPIO.OUT)
		GPIO.setup(PIN_DC,GPIO.OUT)
		GPIO.setup(PIN_SDIN,GPIO.OUT)
		GPIO.setup(PIN_SCLK,GPIO.OUT)
		GPIO.setup(PIN_LEDs,GPIO.OUT)
		GPIO.output(PIN_SCE, GPIO.LOW)
		GPIO.output(PIN_RESET, GPIO.LOW)
		GPIO.output(PIN_DC,GPIO.LOW)
		GPIO.output(PIN_SDIN,GPIO.LOW)
		GPIO.output(PIN_SCLK,GPIO.LOW)
		GPIO.output(PIN_RESET, GPIO.LOW)
		time.sleep(FREQ)
		GPIO.output(PIN_RESET, GPIO.HIGH)
		time.sleep(FREQ)
		self.lcdWrite( LCD_CMD, 0x21 )  # LCD Extended Commands.
		self.lcdWrite( LCD_CMD, 0xBf )  # Set LCD Vop (Contrast). //B1
		self.lcdWrite( LCD_CMD, 0x04 )  # Set Temp coefficent. //0x04
		self.lcdWrite( LCD_CMD, 0x14 )  # LCD bias mode 1:48. //0x13
		self.lcdWrite( LCD_CMD, 0x0C )  # LCD in normal mode. 0x0d for inverse
		self.lcdWrite(LCD_C, 0x20)
		self.lcdWrite(LCD_C, 0x0C)
		self.lcdClear()

	def lcdClose(self):
		GPIO.cleanup()

	"""
	 gotoXY routine to position cursor
	 x - range: 0 to 83
	 y - range: 0 to 5
	"""
	def gotoXY(self, x, y):
		self.lcdWrite( 0, 0x80 | x)  # Column.
		self.lcdWrite( 0, 0x40 | y)  # Row.
  
	"""
	 Draws a pixel in pixel coords (84x48)
	"""
	def drawPixel(self, x, y):
		x=x%LCD_X
		y=y%LCD_Y
		res=255&(1<<(y%8))
		self.orVal(x,y/8,res)

	def draw(self):
		self.gotoXY(0,0)
		for y in range(LCD_YB):
			for x in range(LCD_X):
				self.lcdWrite(1,self.frame[x][y])

	def clear(self):
		for y in range(LCD_YB):
			for x in range(LCD_X):
				self.frame[x][y]=0x0
	
	def drawChar(self, x, y, c):
		if y+8<=LCD_Y :
		  for index in range(5):
			try:
				col=ASCII[ord(c) - 0x20][index]
			except:
				print "I don't know char "+c
				col=ASCII[ord("?")-0x20][index] 
			for i in range(8):
				if (((col>>i)&1)>0):
				   self.drawPixel(x+index,y+i)

	def drawString(self, x, y, string):
		for i in range(len(string)):
			c=string[i]
			if(x+5>LCD_X or c=='\n'):
				x=0
				y+=8
			if c != '\n':
				self.drawChar(x,y,string[i])
				x+=6

	def setDCInverse(self):
		self.lcdDisplayControl(5)
	
	def setDCNormal(self):
		self.lcdDisplayControl(1)

	def setDCBlank(self):
		self.lcdDisplayControl(0)

	def setDCOn():
		self.lcdDisplayControl(4)
if __name__ == '__main__':
	screen= Screen()
	screen.lcdInitialise()
	screen.clear()
	screen.drawString(0,0,"Nuno es un NERD PiNES")
	screen.lcdBacklight(True)
	#screen.clear()
	#for i in range():
	#	screen.drawPixel(20+i,5)
	screen.draw()
	time.sleep(1)
	screen.lcdBacklight(False)
	time.sleep(1)
	screen.lcdBacklight(True)
	time.sleep(2)
	screen.clear()
	screen.draw()
	screen.lcdClose()
